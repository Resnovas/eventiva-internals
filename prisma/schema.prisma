// *** DO NOT EDIT. GENERATED BY PRISMIX. ***
datasource db {
	provider = "postgresql"
	url = env("DATABASE_URL")
}
generator client {
	provider = "prisma-client-js"
	previewFeatures = ["fullTextSearch","filterJson","dataProxy"]
}
generator backend {
	provider = "typegraphql-prisma"
}
generator frontend {
	provider = "typegraphql-prisma"
	output = "../src/database/generated"
}
model Account {
	id String @id @default(uuid())
	prn Int @unique @default(autoincrement())
	username String? @unique
	accountType AccountType @default(USER)
	subsciption Boolean @default(false)
	employer EmployersOnAccount[] @relation(name: "employer")
	employees EmployersOnAccount[] @relation(name: "employees")
	accesses SubuserOnAccount[] @relation(name: "shared")
	subusers SubuserOnAccount[] @relation(name: "subuser")
	accounts ManagersOnAccount[] @relation(name: "managed")
	managers ManagersOnAccount[] @relation(name: "managers")
	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt
	lastLogin DateTime? 
	applied DateTime? 
	promoted DateTime? 
	retired DateTime? 
	title Title? 
	firstname String? 
	midname String? 
	lastname String? 
	Salutation String? 
	dob DateTime? 
	sex String? 
	label String 
	passwordPublic String @unique
	passwordSecret Json @unique
	publicKey String? @unique
	secretKey Json? @unique
	resetPasswordToken String? @unique
	resetPasswordExpires DateTime? 
	apiToken Token[] @relation(name: "AccountToToken")
	deletedDate DateTime? 
	deleted Boolean? @default(false)
	primaryAddress Address? @relation(name: "account")
	addresses Address[] @relation(name: "address")
	contactOfAddress ContactAtAddress[] @relation(name: "AccountToContactAtAddress")
	application Application[] @relation(name: "AccountToApplication")
	emails Email[] @relation(name: "AccountToEmail")
	files Files[] @relation(name: "AccountToFiles")
	phones Phone[] @relation(name: "AccountToPhone")
	rtw RTW[] @relation(name: "AccountToRTW")
	sia SIABadge[] @relation(name: "AccountToSIABadge")
	Status StatusOnAccount[] @relation(name: "AccountToStatusOnAccount")
	subscription SubscriptionOnAccount[] @relation(name: "AccountToSubscriptionOnAccount")
	transactions Transaction[] @relation(name: "AccountToTransaction")
	@@map("accounts")
}
model Token {
	id String @id @default(uuid())
	nickname String 
	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt
	type TokenType 
	publicKey String? @unique
	expiry DateTime 
	account Account @relation(name: "AccountToToken", fields: [accountID], references: [id])
	accountID String 
	deletedDate DateTime? 
	deleted Boolean? @default(false)
}
model SubuserOnAccount {
	accountId String 
	subuserId String 
	account Account @relation(name: "shared", fields: [accountId], references: [id])
	subuser Account @relation(name: "subuser", fields: [subuserId], references: [id])
	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt
	deletedDate DateTime? 
	deleted Boolean? @default(false)
	@@id([accountId, subuserId])
}
model EmployersOnAccount {
	accountId String 
	employerId String 
	account Account @relation(name: "employer", fields: [accountId], references: [id])
	employer Account @relation(name: "employees", fields: [employerId], references: [id])
	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt
	deletedDate DateTime? 
	deleted Boolean? @default(false)
	@@id([accountId, employerId])
}
model ManagersOnAccount {
	accountId String 
	managersId String 
	account Account @relation(name: "managed", fields: [accountId], references: [id])
	managers Account @relation(name: "managers", fields: [managersId], references: [id])
	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt
	deletedDate DateTime? 
	deleted Boolean? @default(false)
	@@id([accountId, managersId])
}
model Address {
	id String @id @default(uuid())
	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt
	account Account @relation(name: "address", fields: [accountId], references: [id])
	accountId String 
	type AddressType 
	coords String? 
	street String 
	city String? 
	state String? 
	country String? 
	zipcode String? 
	addressName String? 
	name String? 
	parking Boolean? @default(false)
	contacts ContactAtAddress[] @relation(name: "AddressToContactAtAddress")
	website String? 
	hoursOfOperation Json? 
	venueStyle VenueStyle[] @relation(name: "AddressToVenueStyle")
	features String 
	details Json? 
	public Boolean @default(false)
	primaryAccount Account? @relation(name: "account", fields: [primaryaccountId], references: [id])
	primaryaccountId String? @unique
	deletedDate DateTime? 
	deleted Boolean? @default(false)
	featuresOfBuisness FeatureOfAddress[] @relation(name: "AddressToFeatureOfAddress")
	phones Phone[] @relation(name: "AddressToPhone")
	rooms Room[] @relation(name: "AddressToRoom")
}
model ContactAtAddress {
	accountId String 
	addressId String 
	account Account @relation(name: "AccountToContactAtAddress", fields: [accountId], references: [id])
	address Address @relation(name: "AddressToContactAtAddress", fields: [addressId], references: [id])
	jobTitle String? 
	phone String? 
	email Email? @relation(name: "ContactAtAddressToEmail", fields: [emailId], references: [id])
	emailId String? 
	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt
	deletedDate DateTime? 
	deleted Boolean? @default(false)
	@@id([accountId, addressId])
}
model VenueStyle {
	id String @id @default(uuid())
	createdAt DateTime @default(now())
	updatedAt DateTime @default(now())
	address Address[] @relation(name: "AddressToVenueStyle")
	name String 
	details String? 
	deletedDate DateTime? 
	deleted Boolean? @default(false)
}
model Email {
	id String @id @default(uuid())
	associatedContact ContactAtAddress[] @relation(name: "ContactAtAddressToEmail")
	domain Domain? @relation(name: "DomainToEmail", fields: [domainId], references: [id])
	domainId String? 
	email String @unique
	account Account? @relation(name: "AccountToEmail", fields: [accountId], references: [id])
	accountId String? 
	verified Boolean @default(false)
	public Boolean @default(false)
	primary Boolean @default(false)
	path String? 
	copy Boolean @default(true)
	notifyFrom DateTime? 
	imap_authUser String? 
	imap_authPass String? 
	imap_accessToken String? 
	imap_authServer Boolean? 
	imap_host String? 
	imap_port String? 
	imap_secure Boolean? @default(true)
	imap_tslRejectUnauthorized Boolean? @default(true)
	imap_tslMinVersion String? 
	imap_resyncDelay Int @default(900)
	smtp_authUser String? 
	smtp_authPass String? 
	smtp_accessToken String? 
	smtp_authServer Boolean? 
	smtp_host String? 
	smtp_port String? 
	smtp_secure Boolean? @default(true)
	smtp_tslRejectUnauthorized Boolean? @default(true)
	smtp_tslMinVersion String? 
	oauth2_authorize Boolean @default(true)
	oauth2_provider String @default("gmail")
	oauth2_authUser String? 
	oauth2_accessToken String? 
	oauth2_refreshToken String? 
	oauth2_expires DateTime? 
	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt
	deletedDate DateTime? 
	deleted Boolean? @default(false)
}
model Application {
	id String @id @default(uuid())
	name String 
	account Account @relation(name: "AccountToApplication", fields: [accountId], references: [id])
	accountId String 
	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt
	deletedDate DateTime? 
	deleted Boolean? @default(false)
}
model Domain {
	id String @id @default(uuid())
	domain String @unique
	verified Boolean @default(false)
	dnsType dnsType @default(TXT)
	linkedEmails Email[] @relation(name: "DomainToEmail")
	data Json 
	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt
	deletedDate DateTime? 
	deleted Boolean? @default(false)
}
model Feature {
	id String @id @default(uuid())
	name String 
	type FeatureType 
	featureOfRoom FeatureOfRoom[] @relation(name: "FeatureToFeatureOfRoom")
	featureOfAddress FeatureOfAddress[] @relation(name: "FeatureToFeatureOfAddress")
	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt
	deletedDate DateTime? 
	deleted Boolean? @default(false)
}
model FeatureOfRoom {
	roomId String 
	featureId String 
	feature Feature @relation(name: "FeatureToFeatureOfRoom", fields: [featureId], references: [id])
	room Room @relation(name: "FeatureOfRoomToRoom", fields: [roomId], references: [id])
	data Json? 
	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt
	deletedDate DateTime? 
	deleted Boolean? @default(false)
	@@id([roomId, featureId])
}
model FeatureOfAddress {
	addressId String 
	featureId String 
	feature Feature @relation(name: "FeatureToFeatureOfAddress", fields: [featureId], references: [id])
	address Address @relation(name: "AddressToFeatureOfAddress", fields: [addressId], references: [id])
	data Json? 
	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt
	deletedDate DateTime? 
	deleted Boolean? @default(false)
	@@id([addressId, featureId])
}
model Room {
	id String @id @default(uuid())
	featuresOfRoom FeatureOfRoom[] @relation(name: "FeatureOfRoomToRoom")
	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt
	deletedDate DateTime? 
	deleted Boolean? @default(false)
	address Address @relation(name: "AddressToRoom", fields: [addressId], references: [id])
	addressId String 
	name String 
	floor String? 
	building String? 
	accessibility Boolean? @default(false)
	checkin DateTime? 
	checkout DateTime? 
	length String? 
	width String? 
	height String? 
	arrangements ArrangementOfRoom[] @relation(name: "ArrangementOfRoomToRoom")
}
model Files {
	id String @id @default(uuid())
	name String 
	rtw RTW? @relation(name: "FilesToRTW", fields: [rtwId], references: [id])
	rtwId String? 
	account Account[] @relation(name: "AccountToFiles")
	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt
	deletedDate DateTime? 
	deleted Boolean? @default(false)
}
model RTW {
	id String @id @default(uuid())
	files Files[] @relation(name: "FilesToRTW")
	name String 
	active Boolean? 
	startDate DateTime? 
	endDate DateTime? 
	account Account @relation(name: "AccountToRTW", fields: [accountId], references: [id])
	accountId String 
	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt
	deletedDate DateTime? 
	deleted Boolean? @default(false)
}
model Phone {
	id String @id @default(uuid())
	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt
	deletedDate DateTime? 
	deleted Boolean? @default(false)
	account Account @relation(name: "AccountToPhone", fields: [accountId], references: [id])
	accountId String 
	address Address @relation(name: "AddressToPhone", fields: [addressId], references: [id])
	addressId String 
	phone String @unique
	public Boolean @default(false)
}
model ArrangementOfRoom {
	roomId String 
	arrangementId String 
	arrangement Arrangement @relation(name: "ArrangementToArrangementOfRoom", fields: [arrangementId], references: [id])
	room Room @relation(name: "ArrangementOfRoomToRoom", fields: [roomId], references: [id])
	capacity Int 
	details String? 
	createdAt DateTime @default(now())
	updatedAt DateTime @default(now())
	deletedDate DateTime? 
	deleted Boolean? @default(false)
	@@id([roomId, arrangementId])
}
model Arrangement {
	id String @id @default(uuid())
	createdAt DateTime @default(now())
	updatedAt DateTime @default(now())
	room ArrangementOfRoom[] @relation(name: "ArrangementToArrangementOfRoom")
	name String 
	icon String? 
	details String? 
	deletedDate DateTime? 
	deleted Boolean? @default(false)
}
model SIABadge {
	id Int @unique @id
	licenseSector LicenseSector 
	type LicenseType 
	licenseExplanation String 
	additionalTerms String 
	createdAt DateTime @default(now())
	active DateTime? 
	expiry DateTime? 
	updatedAt DateTime @updatedAt
	deletedDate DateTime? 
	deleted Boolean? @default(false)
	siaChecks SIACheck[] @relation(name: "SIABadgeToSIACheck")
	account Account? @relation(name: "AccountToSIABadge", fields: [account_id], references: [id])
	account_id String? 
}
model SIACheck {
	id String @id @default(uuid())
	badge SIABadge? @relation(name: "SIABadgeToSIACheck", fields: [sia_id], references: [id])
	sia_id Int? 
	status BadgeStatus 
	AuthUrl String? 
	pubUrl String? 
	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt
	deletedDate DateTime? 
	deleted Boolean? @default(false)
	error String? 
	transactions Transaction? @relation(name: "SIACheckToTransaction", fields: [transactionId], references: [id])
	transactionId String? 
}
model StatusOnAccount {
	statusId String 
	accountId String 
	status Status @relation(name: "StatusToStatusOnAccount", fields: [statusId], references: [id])
	account Account @relation(name: "AccountToStatusOnAccount", fields: [accountId], references: [id])
	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt
	deletedDate DateTime? 
	deleted Boolean? @default(false)
	@@id([statusId, accountId])
}
model Status {
	id String @id @default(uuid())
	name String 
	account StatusOnAccount[] @relation(name: "StatusToStatusOnAccount")
	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt
	deletedDate DateTime? 
	deleted Boolean? @default(false)
}
model Subscription {
	id String @id @default(uuid())
	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt
	deletedDate DateTime? 
	deleted Boolean? @default(false)
	name String? @unique
	cost String? 
	details String? 
	accounts SubscriptionOnAccount[] @relation(name: "SubscriptionToSubscriptionOnAccount")
}
model SubscriptionOnAccount {
	subscriptionId String 
	subscription Subscription @relation(name: "SubscriptionToSubscriptionOnAccount", fields: [subscriptionId], references: [id])
	account Account @relation(name: "AccountToSubscriptionOnAccount", fields: [accountId], references: [id])
	accountId String 
	active Boolean @default(false)
	deactivated DateTime? 
	activated DateTime? 
	startedAt DateTime? 
	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt
	deletedDate DateTime? 
	deleted Boolean? @default(false)
	@@id([accountId, subscriptionId])
}
model Transaction {
	id String @id @default(uuid())
	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt
	deletedDate DateTime? 
	deleted Boolean? @default(false)
	account Account @relation(name: "AccountToTransaction", fields: [accountId], references: [id])
	accountId String 
	SIACheck SIACheck[] @relation(name: "SIACheckToTransaction")
	data Json 
}
enum AccountType {
	USER
	BUSINESS
	PROVIDER
}
enum Title {
	Miss
	Ms
	Mrs
	Mr
	Dr
}
enum TokenType {
	API
	PERSONAL
	SYSTEM
}
enum AddressType {
	PERSONAL
	BUSINESS
}
enum dnsType {
	TXT
	CNAME
}
enum FeatureType {
	STRING
	BOOLEAN
	NUMBER
}
enum LicenseSector {
	CVIT
	CP
	DS
	CCTV
	SG
	VI
	KH
	UNKNOWN
}
enum LicenseType {
	FRONTLINE
	NON_FRONTLINE
}
enum BadgeStatus {
	ACTIVE
	REVOKED
	SUSPENDED
	NON_ACTIVE
}